--                                                    BlinkIT Grocery Data Analysis

-- creating the database
create database Grocery_Analysis

-- selecting the database
use Grocery_Analysis

-- Overview of Data

-- Q. View all the data present in the datasource
select * from Grocery_Data

-- Q. Count of rows present
select count(*) as Row_Count from Grocery_Data

-- Data Cleaning

select distinct Item_Fat_Content from Grocery_Data

--updating the column value
update Grocery_Data
set Item_Fat_Content=
case
	when Item_Fat_Content='LF' then 'Low Fat'
	when Item_Fat_Content='reg' then 'Regular'
	else Item_Fat_Content
end

-- unique values of the column and its count after cleaning
select distinct Item_Fat_Content,count(*) Total_Count from Grocery_Data
group by Item_Fat_Content

-- SQL Queries

-- 1. KEY REQUIREMENTS
-- Total-Sales:  Overall sales generated from the item
select concat(cast(sum(Total_Sales)/1000000 as Decimal(10,2)),' M') as Sales_in_Millions
from Grocery_Data

-- Q Maximum sales produced by the Outlet_Location_Type

select top 1 Outlet_Location_Type,concat(cast(sum(Total_Sales)/100000 as decimal(10,2)),' L') Sales_in_Lakh
from Grocery_Data
group by Outlet_Location_Type
order by sum(Total_Sales) desc

-- Q. Top sales produced by the outlet type
select top 1 Outlet_Type,concat(round(sum(Total_Sales)/1000,0),' K') as Sales_in_Thousand
from Grocery_Data
group by Outlet_Type
order by 2 desc

-- Q. Average Sales : Average revenue per sale
select cast(avg(Total_Sales) as Decimal(10,0)) as Average_Sales
from Grocery_Data

-- Q. Number of Items : Count of different items sold
select count(*) as Total_Item_Sold
from Grocery_Data

-- Q. Average Rating : Average customer rating for items sold
select round(avg(rating),2) as 'Average_Rating'
from Grocery_Data

-- Q. Select the top 3 item_type sold
select  top 3 Item_Type AS 'TOP_3_item_Sold'
FROM Grocery_Data
group by Item_Type
order by sum(Total_Sales) desc


-- Granular Requirement

--Analysis by fat-content
-- Q. Sales generated by distinct fat_content_items

select Item_Fat_Content,
		concat(cast(sum(Total_Sales)/100000 as Decimal(10,2)),' L') as Sales_in_Lakh,
		round(avg(Total_Sales),0) as Average_Sales,
		count(*) as Total_Sale_Count,
		round(avg(rating),1) as Average_rating
from Grocery_Data
group by Item_Fat_Content

-- Q. Total Sales by different item type

select Item_Type,
		concat(cast(sum(Total_Sales)/1000  as Decimal(10,2)),' K') as Total_Sales_IN_Thousands,
		round(avg(Total_Sales),0) as Average_Sales,
		count(*) as Total_Sale_Count,
		round(avg(rating),2) as Average_rating
from Grocery_Data
group by Item_Type
order by sum(Total_Sales) desc

-- Q. Fat Content by Outlet for Total Sales

select Outlet_Location_Type,Item_Fat_Content,
		concat(cast(sum(Total_Sales)/100000 as Decimal(10,2)),' L') as Sales_in_Lakh
from Grocery_Data
group by Outlet_Location_Type,Item_Fat_Content
order by 2 desc

--Q. Total Sales by Outlet Establishment

select Outlet_Establishment_Year,
		concat(cast(sum(Total_Sales)/1000 as Decimal(10,2)),' K') as Sales_in_Thousand,
		round(avg(Total_Sales),0) as Average_Sales,
		count(*) as Total_Sale_Count,
		round(avg(rating),2) as Average_rating
from Grocery_Data
group by Outlet_Establishment_Year
order by Outlet_Establishment_Year

-- Q. Percentage of Sales by Outlet Size

select Outlet_Size,
	concat(round(sum(Total_Sales)/1000,0),' K') as Sales_in_Thousand,
	round((sum(Total_Sales)/(select sum(Total_Sales) from Grocery_Data)) * 100,0) as 'Sales_Percentage'
from Grocery_Data
group by Outlet_Size
order by 2 desc



--________________________________________________________END________________________________________________________